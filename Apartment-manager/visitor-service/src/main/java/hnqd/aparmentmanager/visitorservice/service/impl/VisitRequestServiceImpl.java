package hnqd.aparmentmanager.visitorservice.service.impl;import com.fasterxml.jackson.databind.ObjectMapper;import hnqd.aparmentmanager.common.Enum.EVisitStatus;import hnqd.aparmentmanager.common.dto.response.UserResponse;import hnqd.aparmentmanager.common.exceptions.CommonException;import hnqd.aparmentmanager.visitorservice.client.IDocumentServiceClient;import hnqd.aparmentmanager.visitorservice.client.IUserServiceClient;import hnqd.aparmentmanager.visitorservice.dto.request.VisitRequestDto;import hnqd.aparmentmanager.visitorservice.dto.response.VisitRequestRes;import hnqd.aparmentmanager.visitorservice.entity.VisitRequest;import hnqd.aparmentmanager.visitorservice.entity.VisitRequestVisitor;import hnqd.aparmentmanager.visitorservice.entity.Visitor;import hnqd.aparmentmanager.visitorservice.repository.IVisitRequestRepository;import hnqd.aparmentmanager.visitorservice.repository.IVisitorRepository;import hnqd.aparmentmanager.visitorservice.service.IVisitRequestService;import hnqd.aparmentmanager.visitorservice.specification.VisitRequestSpecification;import jakarta.transaction.Transactional;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Pageable;import org.springframework.data.domain.Sort;import org.springframework.data.jpa.domain.Specification;import org.springframework.stereotype.Service;import java.time.LocalDateTime;import java.time.format.DateTimeFormatter;import java.util.List;import java.util.Map;import java.util.Set;import java.util.stream.Collectors;@Servicepublic class VisitRequestServiceImpl implements IVisitRequestService {    private final IUserServiceClient userServiceClient;    private final ObjectMapper objectMapper;    private final IVisitorRepository visitorRepository;    private final IVisitRequestRepository visitRequestRepository;    private final IDocumentServiceClient documentServiceClient;    @Autowired    public VisitRequestServiceImpl(            IUserServiceClient userServiceClient,            ObjectMapper objectMapper,            IVisitorRepository visitorRepository,            IVisitRequestRepository visitRequestRepository,            IDocumentServiceClient documentServiceClient    ) {        this.visitRequestRepository = visitRequestRepository;        this.userServiceClient = userServiceClient;        this.objectMapper = objectMapper;        this.visitorRepository = visitorRepository;        this.documentServiceClient = documentServiceClient;    }    @Transactional    @Override    public VisitRequest createVisitRequest(VisitRequestDto visitRequestDto) {// Lấy thông tin cư dân từ service khác        UserResponse user = objectMapper.convertValue(                userServiceClient.getUserById(visitRequestDto.getResidentId()).getBody().getData(),                UserResponse.class        );        // Tìm hoặc tạo các Visitor        List<Visitor> visitors = visitRequestDto.getVisitors().stream()                .map(visitorDto -> visitorRepository.findByIdCardNumber(visitorDto.getIdCardNumber())                        .orElseGet(() -> {                            Visitor visitor = new Visitor();                            visitor.setIdCardNumber(visitorDto.getIdCardNumber());                            visitor.setFullName(visitorDto.getFullname());                            visitor.setPhone(visitorDto.getPhone());                            return visitorRepository.save(visitor);                        })                ).toList();        // Step 1: Save visitRequest trước để sinh ID        VisitRequest visitRequest = new VisitRequest();        visitRequest.setRoomId(visitRequestDto.getRoomId());        visitRequest.setResidentId(user.getId());        visitRequest.setExpectedCheckinTime(visitRequestDto.getExpectedCheckinTime());        visitRequest.setStatus(EVisitStatus.PENDING);        Set<VisitRequestVisitor> visitRequestVisitors = visitors.stream()                .map(visitor -> {                    VisitRequestVisitor visitRequestVisitor = new VisitRequestVisitor();                    visitRequestVisitor.setVisitRequest(visitRequest);                    visitRequestVisitor.setVisitor(visitor);                    return visitRequestVisitor;                }).collect(Collectors.toSet());        visitRequest.setVisitRequestVisitors(visitRequestVisitors);        return visitRequestRepository.save(visitRequest);    }    @Override    public Page<VisitRequest> getVisitRequests(Map<String, String> params) {        int page = Integer.parseInt(params.get("page"));        int size = Integer.parseInt(params.get("size"));        int userId = Integer.parseInt(params.getOrDefault("userId", "0"));        int roomId = Integer.parseInt(params.getOrDefault("roomId", "0"));        String visitDate = params.getOrDefault("fromDate", null);        String status = params.getOrDefault("status", null);        Specification<VisitRequest> specification = Specification.where(null);        if (userId != 0) {            specification.and(VisitRequestSpecification.hasUserId(userId));        }        if (roomId != 0) {            specification.and(VisitRequestSpecification.hasRoomId(roomId));        }        if (visitDate != null) {            LocalDateTime date = null;            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");            date = LocalDateTime.parse(visitDate, formatter);            specification.and(VisitRequestSpecification.hasDay(date));        }        if (status != null) {            specification.and(VisitRequestSpecification.hasStatus(status));        }        Pageable pageable = PageRequest.of(page, size, Sort.by("createdAt").descending());        return visitRequestRepository.findAll(specification, pageable);    }    @Override    public Page<VisitRequestRes> getVisitRequestRes(Map<String, String> params) {        int page = Integer.parseInt(params.get("page"));        int size = Integer.parseInt(params.get("size"));        int userId = Integer.parseInt(params.getOrDefault("userId", "0"));        int roomId = Integer.parseInt(params.getOrDefault("roomId", "0"));        String visitDate = params.getOrDefault("fromDate", null);        String status = params.getOrDefault("status", null);        Specification<VisitRequest> specification = Specification.where(null);        if (userId != 0) {            specification = specification.and(VisitRequestSpecification.hasUserId(userId));        }        if (roomId != 0) {            specification = specification.and(VisitRequestSpecification.hasRoomId(roomId));        }        if (visitDate != null) {            LocalDateTime date = null;            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");            date = LocalDateTime.parse(visitDate, formatter);            specification = specification.and(VisitRequestSpecification.hasDay(date));        }        if (status != null) {            specification = specification.and(VisitRequestSpecification.hasStatus(status));        }        Pageable pageable = PageRequest.of(page, size, Sort.by("createdAt").descending());        Page<VisitRequest> visitRequests = visitRequestRepository.findAll(specification, pageable);        return visitRequests.map(this::mapToRes);    }    @Override    public VisitRequest updateVisitRequest(Map<String, String> params) {        int visitRequestId = Integer.parseInt(params.get("visitRequestId"));        String visitDate = params.getOrDefault("visitDate", null);        String expectedCheckinTime = params.getOrDefault("expectedCheckinTime", null);        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");        VisitRequest visitRequest = visitRequestRepository.findById(visitRequestId).orElseThrow(                () -> new CommonException.NotFoundException("VisitRequest with id " + visitRequestId + " not found!")        );        if (params.get("status") != null) {            visitRequest.setStatus(EVisitStatus.safeValueOfName(params.get("status")));        }        if (visitDate != null) {            visitRequest.setVisitDate(LocalDateTime.parse(visitDate, formatter));        }        if (expectedCheckinTime != null) {            visitRequest.setExpectedCheckinTime(LocalDateTime.parse(expectedCheckinTime, formatter));        }        return visitRequestRepository.save(visitRequest);    }    private VisitRequestRes mapToRes(VisitRequest visitRequest) {        VisitRequestRes res = new VisitRequestRes();        res.setId(visitRequest.getId());        res.setResidentId(visitRequest.getResidentId());        res.setRoomId(visitRequest.getRoomId());        res.setVisitDate(visitRequest.getVisitDate());        res.setExpectedCheckinTime(visitRequest.getExpectedCheckinTime());        res.setStatus(visitRequest.getStatus());        // Lấy danh sách Visitor từ VisitRequestVisitor        Set<Visitor> visitors = visitRequest.getVisitRequestVisitors().stream()                .map(VisitRequestVisitor::getVisitor)                .collect(Collectors.toSet());        res.setVisitors(visitors);        res.setSecurityLogs(visitRequest.getSecurityLogs());        return res;    }}